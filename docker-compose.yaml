networks:
  ticketz:

volumes:
  redis_data:
  postgres_data:
  backend_public:
  backend_private:
    
services:

  backend:
    image: ghcr.io/ticketz-oss/ticketz-backend:pro
    volumes:
      - backend_public:/usr/src/app/public
      - backend_private:/usr/src/app/private
    env_file:
      - .env-backend
    restart: always
    depends_on:
      - postgres
      - redis
    networks:
      - ticketz

  frontend:
    image: ghcr.io/ticketz-oss/ticketz-frontend:pro
    volumes:
      - backend_public:/var/www/backend-public
    env_file:
      - .env-frontend
    restart: always
    depends_on:
      - backend
    networks:
      - ticketz

  postgres:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-ticketz}
      - POSTGRES_DB=${POSTGRES_DB:-ticketz}
      - POSTGRES_HOST_AUTH_METHOD=trust
      - TZ=${TZ:-America/Sao_Paulo}
    expose:
      - 5432
    restart: always
    networks:
      - ticketz

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    expose:
      - 6379
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - ticketz

  cloudflared:
    image: cloudflare/cloudflared
    restart: always
    command: tunnel run
    env_file:
      - .env-cloudflared
    depends_on:
      - backend
      - frontend
    networks:
      - ticketz

  watchtower:
    image: containrrr/watchtower
    profiles: ["do-not-start"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 1800 --cleanup
    restart: unless-stopped
